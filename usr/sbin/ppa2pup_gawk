#!/bin/bash

# ppa2pup
# convert an Ubuntu PPA repo file, into a Puppy compatible repo file.

# @TODO1 - fix last few fields of package entries (should contain the supported ubuntu distro, not current system)

. /etc/DISTRO_SPECS

#if [ "$DISTRO_BINARY_COMPAT" != "ubuntu" ] && [ "$DISTRO_BINARY_COMPAT" != "debian" ];then
#  echo "Sorry, you must be running a .deb compatible Puppy Linux"
#  echo "to use this tool. Your Puppy is based on '$DISTRO_BINARY_COMPAT'"
#  exit 1
#fi

#Consider /looking to see if /root/.packages/repo exists. See: https://github.com/s243a/woof-CE/blob/8e44442ca9144b202b73737101231115a87488f1/woof-code/rootfs-packages/PKG/usr/sbin/ppa2pup#L17
[ -z "$REPO_DIR" ] && REPO_DIR="$(realpath $HOME/.packages)"
[ -z "$REPO_DIR" ]  && REPO_DIR="$(readlink $HOME/.packages)"
[ -z "$REPO_DIR" ]  && REPO_DIR="$HOME/.packages)"

if [ ! "$1" ] || [ "$1" = "-h" ] || [ "$1" = "-help" ]
then

  echo "This script creates a Puppy-compatible repo file from a PPA or Debian repo."
  echo
  echo "For Launchpad PPA repos:"
  echo
  echo "  Usage: ppa2pup ppa:<user>/<repo> [debian|ubuntu] [bionic|stretch|artful|etc] [main|all|contrib|non-free|etc]"
  echo
  echo "Examples:"
  echo
  echo "  ppa2pup ppa:team-xbmc/ppa"
  echo
  echo "  ppa2pup ppa:team-xbmc/ppa ubuntu bionic"
  echo
  echo "  ppa2pup ppa:team-xbmc/ppa ubuntu artful"
  echo
  echo "  ppa2pup ppa:team-xbmc/ppa debian stretch"
  echo
  echo
  echo "For other third-party Debian repos:"
  echo
  echo "  Usage: ppa2pup http://site.com/[debian|ubuntu]/ [stretch|bionic|etc] [main|contrib|non-free|etc]"
  echo
  echo "Examples:"
  echo
  echo "  ppa2pup http://rpms.litespeedtech.com/debian/"
  echo
  echo "  ppa2pup http://rpms.litespeedtech.com/debian/ stretch main"
  echo
  echo "  ppa2pup http://repo.steampowered.com/steam/ precise steam"
  echo
  echo "  ppa2pup http://http.kali.org/kali/ kali-bleeding-edge main contrib non-free"
  echo
  echo "NOTE: Any ommitted distro names or versions will be guessed."
  echo
  exit 1

fi


# create a dir to work in
mkdir -p /tmp/ppa_pkgs

# remove any old files
rm /tmp/ppa_pkgs/* 2>/dev/null


# we need to find the correct Packages.gz for the distro (debian/ubuntu),
# distro version (stretch/bionic/etc), and architecture (i386/amd64)

arch='i386'
case $(uname -m) in
  i*86) arch='i386'  ;;
  *64)  arch='amd64' ;;
esac



if [[ "$1" =~ 'ppa:' ]]
then

  # we got a 'PPA' URL, lets parse it and get the Packages.gz
  ppaname="${1/*\//}"
  username="${1/\/*/}"
  username="${username//ppa:/}"
  ppaname="${ppaname//ppa:/}"

  # get username, but strip special chars
  PPA_NAME="${username//[-_:]/}"

  distro=${2:-$DISTRO_BINARY_COMPAT}
  distro_ver=${3:-$DISTRO_COMPAT_VERSION}
  repo_name="$distro_ver-$PPA_NAME"
  repo_filename="Packages-$distro-$distro_ver-${PPA_NAME}"
  repo_stream=${4:-main}
  repo_stream2=''
  repo_stream3=''
  repo_stream4=''
  repo_stream5=''
  repo_stream6=''
  [ "$5" != '' ] && repo_stream2=${5}
  [ "$6" != '' ] && repo_stream3=${6}
  [ "$7" != '' ] && repo_stream4=${7}
  [ "$8" != '' ] && repo_stream5=${8}
  [ "$9" != '' ] && repo_stream6=${9}


  URL=http://ppa.launchpad.net/${username}/${ppaname}/${distro}/dists/${distro_ver}/${repo_stream}/binary-${arch}/Packages.gz
  repo_url=http://ppa.launchpad.net/${username}/${ppaname}/${distro}/

elif [[ "$1" =~ 'http://' ]] || [[ "$1" =~ 'https://' ]];then

  # we got a Debian repo source URL, lets parse it and get the Packages.gz

  distro=${DISTRO_BINARY_COMPAT}
  distro_ver=${2:-$DISTRO_COMPAT_VERSION}
  repo_url=$(echo $1 | sed -e 's#/$##g')/
  repo_stream=${3:-main}
  repo_stream2=''
  repo_stream3=''
  repo_stream4=''
  repo_stream5=''
  repo_stream6=''
  repo_stream7=''
  [ "$4" != '' ] && repo_stream2=${4}
  [ "$5" != '' ] && repo_stream3=${5}
  [ "$6" != '' ] && repo_stream4=${6}
  [ "$7" != '' ] && repo_stream5=${7}
  [ "$8" != '' ] && repo_stream6=${8}
  [ "$9" != '' ] && repo_stream7=${9}

  URL=$(echo $1 | sed -e 's#/$##g')/dists/${distro_ver}/${repo_stream}/binary-${arch}/Packages.gz

else

  # didnt get ppa:foo/bar, exit with usage
  $0 -h
  exit 1

fi

PACKAGES_PATH=/tmp/ppa_Packages #TODO: use vars instead of litteral paths. See: https://github.com/s243a/woof-CE/blob/8e44442ca9144b202b73737101231115a87488f1/woof-code/rootfs-packages/PKG/usr/sbin/ppa2pup#L204

for stream in $repo_stream $repo_stream2 $repo_stream3 $repo_stream4
do

  [ "$stream" = '' ] && continue

  rm /tmp/ppa_Packages /tmp/ppa_Packages.gz 2>/dev/null
  download_failed=false

  download_url=${URL//$repo_stream/$stream}

  wget --quiet $download_url -O /tmp/ppa_Packages.gz 1>/dev/null \
    || download_failed=true

  if [ ! -f /tmp/ppa_Packages.gz ] || [ $download_failed = true ];then
    echo
    echo "ERROR: the PPA repo '${repo_name:-$repo_url}' not found for $distro $distro_ver:"
    echo
    echo "  $download_url"
    echo
    echo "You could try a different version of the repo."
    echo
    $0 -h
    exit 1
  fi


  gunzip /tmp/ppa_Packages.gz


  # if Packages file is empty, dont create a repo for it
  if [ -z /tmp/ppa_Packages ] || [ ! -s /tmp/ppa_Packages ];then
    continue
  fi

  # if we didn't get the name from the ppa:foo/bar style URL
  if [[ ! "$1" =~ 'ppa:' ]]
  then

    # check if this repo is already installed (find its name in Pkg sources files)
    PPA_NAME="$(grep -m1 "^${distro_ver}-${stream:-main}|" $HOME/.pkg/sources-all | cut -f1 -d'|' 2>/dev/null)"

    PPA_NOT_YET_INSTALLED=false
    # get repo name and filename
    if [ "$PPA_NAME" = "" ];then
      PPA_NOT_YET_INSTALLED=true
      echo
      read -e -p "Enter a repo name, such as '${distro_ver}-${stream:-main}':  " -i "${distro_ver}-${stream:-main}" PPA_NAME
    fi
    # replace any spaces or underscores with dashes, all lower case
    PPA_NAME="$( echo "${PPA_NAME// /-}" | tr '_' '-' | tr '[:upper:]' '[:lower:]' )"

    # PRECAUTION: if repo name is "bionic-main", "stretch-main" (etc), it may override
    # another, much more important repo.. let's prevent that by renaming the repo
    if [ "$PPA_NAME" = "${distro_ver}-main"            ] ||
       [ "$PPA_NAME" = "${DISTRO_BINARY_COMPAT}-main"  ] ||
       [ "$PPA_NAME" = "${DISTRO_FILE_PREFIX}-main"    ] ||
       [ "$PPA_NAME" = "${DISTRO_COMPAT_VERSION}-main" ]
    then
      # if a launchpad.net URL, build a new name from the URL
      if [[ "$1" =~ 'launchpad' ]];then
        PPA_NAME="$2-$(echo "$1" | cut -f4 -d'/')"
        PPA_NAME="${PPA_NAME//-debian/}"
        PPA_NAME="${PPA_NAME//-ubuntu/}"
        DUPED_PPA_NAME="$(grep -m1 "^$PPA_NAME|" $HOME/.pkg/sources-all | cut -f1 -d'|' 2>/dev/null)"
        if [ $PPA_NOT_YET_INSTALLED = false ] && [ "$DUPED_PPA_NAME" != "" ];then
          EXISTING_PPA_NAME="$(grep -m1 "$repo_url" ~/.pkg/sources-all | cut -f1 -d'|')"
          if [ "$EXISTING_PPA_NAME" = "" ];then
            echo
            echo "The auto-generated repo name of '$PPA_NAME' is already taken, and may override other repos."
            echo
            read -e -p "Enter a new repo name, such as '${distro_ver}-reponame':  " -i "${distro_ver}-reponame" PPA_NAME
          else
            PPA_NAME="$EXISTING_PPA_NAME"
          fi
        fi
      # if not launchpad URL, just ask for a new name
      elif [ $PPA_NOT_YET_INSTALLED = false ];then
        DUPED_PPA_NAME="$(grep -m1 "^$PPA_NAME|" $HOME/.pkg/sources-all | cut -f1 -d'|' 2>/dev/null)"
        if [ $PPA_NOT_YET_INSTALLED = false ] && [ "$DUPED_PPA_NAME" != "" ];then
          EXISTING_PPA_NAME="$(grep -m1 "$repo_url" ~/.pkg/sources-all | cut -f1 -d'|')"
          if [ "$EXISTING_PPA_NAME" = "" ];then
            echo
            echo "The auto-generated repo name of '$PPA_NAME' is unsafe, and may override other repos."
            echo
            read -e -p "Enter a new repo name, such as '${distro_ver}-reponame':  " -i "${distro_ver}-reponame" PPA_NAME
          else
            PPA_NAME="$EXISTING_PPA_NAME"
          fi
        fi
      fi
    fi

    repo_name="$PPA_NAME"
    repo_filename="Packages-$distro-${PPA_NAME}"

  fi

  echo
  echo "Found URL:"
  echo
  echo "  $download_url"
  echo
  echo "Repo to create:"
  echo "   $repo_name"
  echo
  echo "Repo file to create:"
  echo "   ~/.packages/$repo_filename"
  echo

  rm /tmp/$repo_filename &>/dev/null

	cat "$PACKAGES_PATH" | awk \
'function get_inequality(s){
	switch(s){
		case "<":
		  return "lt"
		  break
		case ">":
		  return "gt"
		  break
		case "<=":
		  return "le"
		  break
		case ">=":
		  return "ge"
		  break
		case "=":
		  return "eq"
		  break

    }
    return ""
}
function fixdepends(s,   p,a,dep_i,dep_split,pkg_i,ver_i,v,ineq,sout) {
	split(s,a,",")
	for (p in a) {
		match(a[p],/^[ \t]*([^ \t]+)[ \t]*(\((.*)\))?/,dep_split)
		pkg_i = dep_split[1]
		sout = sout ",+" pkg_i
		if ( length(dep_split) > 1 ){
		  ver_i=dep_split[3]
		  split(ver_i,v," ")
		  ineq=get_inequality(v[1])
		  if ( length(v) > 1 ){
		    sout = sout "&" ineq v[2]
		  }
	    }
	}
	sub(/^,/,"",sout) ; return sout;
}
/^Package:/     { sub(/^Package: /,"");  PKG=$0; }
/^Version:/     { sub(/^Version: /,"");  PKGVER=$0; }
/^Filename:/    { sub(/^Filename: /,""); PKGPATH=$0; sub(/\/[^\/]*$/,"",PKGPATH); sub(/.*\//,""); PKGFILE=$0; }
/^Priority:/    { sub(/^Priority: /,""); PKGPRIO=$0; }
/^Section:/     { sub(/^Section: /,"");  PKGSECTION=$0; }
/^Installed-Size:/ { sub(/^Installed-Size: /,"");  PKGSIZE=$0; }
/^Depends:/     { sub(/^Depends: /,"");     PKGDEP=fixdepends($0) "," PKGDEP; }
/^Pre-Depends:/ { sub(/^Pre-Depends: /,""); PKGDEP=fixdepends($0) "," PKGDEP; }
/^Description:/ { sub(/^Description: /,""); PKGINFO=substr($0,1,200); }
/^$/            { print PKG "_" PKGVER "|" PKG "|" PKGVER "||" PKGSECTION "|" PKGSIZE "|" PKGPATH "|" PKGFILE  "|" PKGDEP "|" PKGINFO "|" PKGOS "|" PKGOSVER  ;

                  PKG=""; PKGVER=""; PKGSECTION=""; PKGSIZE=""; PKGFILE=""; PKGPATH=""; PKGDEP=""; PKGINFO=""; PKGPRIO="";    }
' > /tmp/$repo_filename



  rm /tmp/ppa_pkgs/* /tmp/${repo_filename}_sorted 2>/dev/null


  # sort & move the repo file
  sort -u /tmp/$repo_filename > /tmp/${repo_filename}_sorted 2>/dev/null


  if [ ! -f /tmp/${repo_filename}_sorted ];then
    echo "Error: Repo file not created!"
    exit 1
  fi

  mv  /tmp/${repo_filename}_sorted  ~/.packages/$repo_filename

  echo "Success! File created."
  echo

  fallback_repos="$(pkg repo-list | grep -v $repo_name | tr '\n' ' ')"
  repo_entry="$repo_name|deb|$repo_filename|$repo_url||||$fallback_repos"


  # if already added to ~/.pkg/sources[-all], remove it
  if [ "$(cat ~/.pkg/sources     | grep -m1 "^$repo_name|")" != "" ] || \
     [ "$(cat ~/.pkg/sources-all | grep -m1 "^$repo_name|")" != "" ];then
    cat ~/.pkg/sources | grep -v "^$repo_name|" > /tmp/pkgsources
    cat ~/.pkg/sources-all | grep -v "^$repo_name|" > /tmp/pkgsources-all
    mv /tmp/pkgsources ~/.pkg/sources
    mv /tmp/pkgsources-all ~/.pkg/sources-all
  fi


  # add repo entry to ~/.pkg/sources
  pkg add-source "$repo_entry"
  echo

  # refresh list of available repos
  pkg update-sources
  echo
  echo "Repo info:"
  pkg repo-info $repo_name
  echo


  if [ "$(cat ~/.pkg/sources | grep -m1 "^$repo_name|")" != "" ];then
    echo "Success! Repo added and available to use."
    echo
    echo "To use this repo, simply type the following and hit ENTER:"
    echo "  pkg repo $repo_name"
    echo
  fi

done

exit 0
