.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.
.TH PKG "1" "DATE_PLACEHOLDER" "Pkg VERSION_PLACEHOLDER" "User Commands"
.SH NAME
Pkg 
.SH VERSION
VERSION_PLACEHOLDER
.SH SYNOPSIS
.B pkg
[OPTION(S)] PKGNAME|FILENAME|SEARCH
.SH DESCRIPTION
An advanced command-line package manager for downloading, installing, 
.TP
converting and removing packages and their dependencies.
.PP
These options can be used together and MUST precede all others:
.PP
.TP
\fB\-\-ask\fR|\-a
ask before doing stuff (give as 1st option)

.TP
\fB\-\-force\fR |\-f
force downloading, installing and uninstalling

.TP
\fB\-\-no\-colour\fR |\-nc
disable ANSI colours in console output
.PP
These options can be used with the options above, but not
with each other:
.PP
.TP
\fB\-\-get\fR|\-g PKGNAME
download & install matching package and deps

.TP
\fB\-\-get\-only\fR|\-go PKGNAME
same as \fB\-\-get\fR, but don't install

.TP
\fB\-\-download\fR|\-d PKGNAME
download a package from CURRENT repo

.TP
\fB\-\-install\fR|\-i PKGNAME
install a downloaded package

.TP
\fB\-\-install\-all\fR|\-ia
install all downloaded packages

.TP
\fB\-\-deps\fR|\-e PKGNAME
install dependencies of matching package

.TP
\fB\-\-deps\-download\fR|\-ed PKGNAME
only download dependencies, no install

.TP
\fB\-\-deps\-all\fR|\-ea
install dependencies of all installed packages

.TP
\fB\-\-deps\-check\fR|\-ec
prints message about missing dependencies

.TP
\fB\-\-pkg\-update\fR|\-pu [PKGNAME]
update all matching installed packages

.TP
\fB\-\-uninstall\fR|\-u PKGNAME
uninstall a pet package

.TP
\fB\-\-uninstall\-all\fR|\-ua
uninstall all installed packages

.TP
\fB\-\-delete\fR|\-l PKGNAME
delete a downloaded package

.TP
\fB\-\-delete\-all\fR|\-la
delete ALL downloaded pet packages!

.TP
\fB\-\-clean\fR
delete downloaded package files of pkgs that are installed

.PP
These options cannot be used with any other options:
.PP
.TP
\fB\-\-all\-pkgs\fR
list details of all packages in CURRENT repo

.TP
\fB\-\-search\fR|\-s [SEARCH]
search all package info in CURRENT repo

.TP
\fB\-\-search\-all\fR|\-sa [SEARCH]
search all package info in ALL repos

.TP
\fB\-\-names\fR|\-n [PKG]
list package name matches in the CURRENT repo

.TP
\fB\-\-names\-all\fR|\-na [PKG]
list package name matches in ALL repos

.TP
\fB\-\-names\-exact\fR|\-ne [PKG]
list EXACT package name matches in CURRENT repo

.TP
\fB\-\-names\-exact\-all\fR|\-nea [PKG]
list EXACT package name matches in ALL repos

.TP
\fB\-\-list\-downloaded\fR|\-ld [PKG]
list downloaded packages, PKGNAME is a filter

.TP
\fB\-\-list\-installed\fR|\-li|\-LI [PKG]
list installed packages, PKGNAME is a filter

.TP
\fB\-\-list\-deps\fR|\-le |\-LE PKGNAME
list the dependencies of PKGNAME

.TP
\fB\-\-pkg\-build\fR|\-pb PKG
build a PET package from source and install it

.TP
\fB\-\-pkg\-build\-list\fR|\-pbl [PKG]
list all build scripts, PKGNAME is optional

.TP
\fB\-\-pkg\-status\fR|\-ps|\-PS PKG
print status of package (name, size, deps, etc)

.TP
\fB\-\-pkg\-entry\fR|\-pe PKG
print repo entry of package (PKG must be in current repo)

.TP
\fB\-\-pkg\-installed\fR|\-pi PKG
return true if package installed, false if not

.TP
\fB\-\-pkg\-repack\fR|\-pr PKG
build a .pet package from an installed package

.TP
\fB\-\-pkg\-combine\fR|\-pc PKG
build a new package containing PKGNAME + deps

.TP
\fB\-\-sfs\-combine\fR|\-sc PKG
build a new SFS file containing PKGNAME + deps

.TP
\fB\-\-contents\fR|\-c PKG
list the contents of a downloaded package

.TP
\fB\-\-which\fR|\-w FILENAME
find out which pkg FILENAME comes from

.TP
\fB\-\-which\-repo\fR|\-wr PKG
find out which repo PKG comes from

.TP
\fB\-\-repo\fR|\-r [REPONAME]
set repo to use, show current repo if none given

.TP
\fB\-\-repo\-info\fR|\-ri REPONAME
display the name, and other info of CURRENT repo

.TP
\fB\-\-repo\-list\fR|\-rl
list names of all available repositories

.TP
\fB\-\-repo\-file\-list\fR|\-rfl
list all available repository files

.TP
\fB\-\-repo\-update\fR|\-ru [REPONAME]
update the current repo package list

.TP
\fB\-\-repo\-convert\fR|\-rc FILE
convert repo files to pre/post Woof format

.TP
\fB\-\-add\-source\fR
add new repo (needs repo file in ~/.packages/)

.TP
\fB\-\-update\-sources\fR
update the list of available repos

.TP
\fB\-\-repo\-pkg\-scope\fR one|all
search pkgs in current repo (one), or all (all)

.TP
\fB\-\-repo\-dep\-scope\fR one|all
search deps in current repo (one), or all (all)

.TP
\fB\-\-bleeding\-edge\fR no|yes if yes, get latest pkg versions, from ANY repo

.TP
\fB\-\-recursive\-dep\-check\fR no|yes
get deps recursively (yes), or not (no)

.TP
\fB\-\-dir2pet\fR DIR
create a pet package from a directory

.TP
\fB\-\-dir2sfs\fR DIR
create an sfs package from a directory

.TP
\fB\-\-dir2tgz\fR DIR
create a tar.gz file from a directory

.TP
\fB\-\-deb2pet\fR DEBFILE
convert local deb file to a pet package

.TP
\fB\-\-pet2sfs\fR PETFILE
convert local pet file to an sfs package

.TP
\fB\-\-pet2tgz\fR PETFILE
convert local pet file to a tar.gz package

.TP
\fB\-\-pet2txz\fR PETFILE
convert local pet file to a tar.xz package

.TP
\fB\-\-sfs2pet\fR SFSFILE
convert local sfs file to a pet package

.TP
\fB\-\-tgz2pet\fR TARFILE
convert local tar.gz|tgz file to PET

.TP
\fB\-\-txz2pet\fR TXZFILE
convert local tar.xz|txz file to PET

.TP
\fB\-\-workdir\fR
set a new working directory. Default is ~/pkg/

.TP
\fB\-\-autoclean\fR
auto delete pkgs after installation

.TP
\fB\-\-show\-config\fR
show current config, repo and search settings

.TP
\fB\-\-welcome\fR
show a menu of helpful cmds to help get started

.TP
\fB\-\-func\-list\fR
show the list of internal Pkg functions

.TP
\fB\-\-version\fR|\-v
show the version of this script

.TP
\fB\-\-help\fR|\-h
show this help information

.TP
\fB\-\-examples\fR|\-ex
show example command line usage of pkg

.TP
\fB\-\-usage\fR|\-usage
print usage info on the given CMD or list CMDs

.TP
\fB\-\-help\-all\fR|\-H
show a full description, with added info
.PP
With online repositories, you don't need to give the .pet file extension.
.PP
If the package is 'downloaded' (in \fI\,/root/pkg\/\fP), you won't need to give
the path, only the filename.
.PP
To check if PKGNAME is downloaded,
just enter: \fBpkg \-ld\fR PKGNAME
.PP
You can also pipe stuff to Pkg, just give a dash (\-) as the last option.
.PP
The general syntax is this:     echo \fB"$PKG_LIST" | pkg\fR [OPTIONS] \-
.PP
You can pipe recursively:       \fBpkg\fR \-li | \fBpkg\fR [OPTIONS] \-
.PP
If only a dash was given, Pkg will either install or uninstall
each package,

depending on whether or not the package is installed:

.IP
.PP
echo \fB"$PKGLIST"\fR | pkg \-
.PP
You can give multiple packages by encasing them in double quotes ("")
.PP
.TP
pkg \fB\-g\fR "PKG1 PKG2"
download & install PKG1 and PKG2, plus deps

.TP
pkg \fB\-u\fR "PKG1 PKG2"
uninstall multiple packages from the system

.TP
pkg \fB\-d\fR "PKG1 PKG2"
download multiple packages from the repo

.TP
pkg \fB\-pb\fR "PKG1 PKG2"
compile, build & install multiple pkgs

.TP
pkg \fB\-li\fR "PKG1 PKG2"
list installed pkgs matching PKG1 or PKG2

.SH "EXAMPLE COMMANDS"
.TP
pkg \fB\-s\fR SEARCH
list pkgs in current repo matching SEARCH

.TP
pkg \fB\-sa\fR SEARCH
list pkgs in all repos matching SEARCH

.TP
pkg \fB\-n\fR SEARCH
search name only, list all matching pkgs

.TP
pkg \fB\-g\fR filezilla
get & install filezilla and deps

.TP
pkg \fB\-a\fR \fB\-g\fR filezilla
ask to download filezilla and each of its deps

.TP
pkg \fB\-a\fR \fB\-la\fR
ask to delete all downloaded packages

.TP
pkg \fB\-a\fR \fB\-e\fR PKGNAME
install deps of PKGNAME, ask each time

.TP
pkg \fB\-a\fR \fB\-d\fR qupzilla\-1.2.0
ask to download qupzilla\-1.2.0

.TP
pkg \fB\-go\fR filezilla
download filezilla & deps, don't install

.TP
pkg \fB\-e\fR PKGNAME
install all deps of PKGNAME, dont ask

.TP
pkg \fB\-d\fR qupzilla\-1.3.1
download qupzilla\-1.3.1 no questions

.TP
pkg \fB\-l\fR qupzilla\-1.3.1
delete the downloaded qupzilla\-1.3.1

.TP
pkg \fB\-pb\fR jwm
compile, build & install the 'jwm' package

.TP
pkg \fB\-la\fR
delete all downloaded packages without asking!

.TP
pkg \fB\-li\fR vim | pkg \fB\-ps\fR \-
Get info on all installed Vim pkgs

.TP
pkg \fB\-li\fR vim | pkg \fB\-wr\fR \-
Get repo of an installed Vim pkg

.TP
pkg \fB\-li\fR | pkg \fB\-a\fR \fB\-u\fR \-
Ask to uninstall installed packages one by one
.PP

To install or convert local packages or folders, give the path (and filename):
.TP
.PP
pkg \fB\-\-dir2sfs\fR /path/to/dir/
convert a local directory to a .sfs package

.TP
pkg \fB\-i\fR \fI\,/path/to/file.pet\/\fP
install pet package, include the extension!

.TP
pkg \fB\-\-tgz2pet\fR \fI\,/path/to/file\/\fP
convert a local .tar.gz file to PET package

.SH "SEE ALSO"
\fBpkgdialog\fR(1), \fBgpkgdialog\fR(1)
